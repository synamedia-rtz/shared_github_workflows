name: CI

permissions:
  id-token: write
  contents: read
  checks: write
on:
  workflow_dispatch: ## manual execution
  workflow_call: ## call from upper workflow
    secrets:
      PAT:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
    inputs:
      python_version:
        description: Python version
        default: '3.x'
        required: false
        type: string
      runs-on:
        description: Executer Platform
        default: 'ubuntu-latest'
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
    steps:
      - name: GIT | Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          submodules: recursive
      - name: SETUP | Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python_version || '3.x'  }}
          architecture: 'x64'
      - name: SETUP | AWS Credentials ## Use role when running on github.com
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 7200
      - name: BUILD | Install dependencies
        run: |
          python3 -m venv env && source env/bin/activate
          python3 -m pip install --upgrade pip
          [[ -s requirements.txt ]] && python3 -m pip install -r requirements.txt
          python3 -m pip list
      - name: BUILD | Check Format
        id: format
        uses: psf/black
        with:
          args: ". --check"
        continue-on-error: true #${{ fromJSON(github.event.inputs.continue) }}
      - name: BUILD | Lint
        id: lint
        un: |
          . env/bin/activate && python3 -m pip install pylint
          pylint $(git ls-files '*.py')
        continue-on-error: true #${{ fromJSON(github.event.inputs.continue) }}
      - name: BUILD | Test
        id: test
        continue-on-error: true #${{ fromJSON(github.event.inputs.continue) }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          . env/bin/activate && python3 -m pip install pytest pytest-html
          pytest --pyargs --junitxml=report/tests-report.xml --html=report/tests-report.html --self-contained-html -vvv -s
      - run: |
          echo '::warning:: WARNING !!!! Test Failed'
        if: steps.test.outcome == 'failure'
      - name: BUILD | Test Report
        uses: synamedia-rtz/github_action_test_reporter@v1
        if: success() || failure()
        with:
          name: CI tests results
          path: report/tests-*.xml
          reporter: java-junit
      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Test reports
          path: |
            'report/**'
